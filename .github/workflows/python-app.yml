name: AutoBuild-QQwebhook-MultiPlatform

on:
  push:
    paths-ignore: 
      - '*.md'
  workflow_dispatch:

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        python-version: ['3.10']
        include:
          - os: ubuntu-latest
            ext: ''
          - os: windows-latest
            ext: '.exe'

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
        cache-dependency-path: '​**​/requirements.txt'

    - name: Install system dependencies
      if: matrix.os == 'ubuntu-latest'
      run: sudo apt-get install -y build-essential python3-dev

    - uses: actions/cache@v3
      name: Cache pip packages
      with:
        path: |
          ~/.cache/pip
          ​**​/__pycache__
        key: ${{ runner.os }}-pip-${{ hashFiles('​**​/requirements.txt') }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt pyinstaller

    - name: Build executable
      run: |
        pyinstaller --onefile --name qqwebhook${{ matrix.ext }} main.py
        if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
          chmod +x dist/qqwebhook.exe
        fi

    - name: Package artifacts
      run: |
        mkdir release
        cp dist/qqwebhook${{ matrix.ext }} release/
        zip -r qqwebhook-${{ github.run_id }}-${{ matrix.os }}.zip release/*

    - uses: actions/upload-artifact@v3
      with:
        name: qqwebhook-${{ matrix.os }}
        path: qqwebhook-*.zip
